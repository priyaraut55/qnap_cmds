#!/usr/bin/python2.7
import sys
import argparse
import subprocess
import pdb

#populate this map as key value pairs based on options sent in the user
add_device_options_set = {}

class CmndAction(argparse.Action):
    def __init__(self, option_strings, dest, nargs=None, **kwargs):
        if nargs is not None:
            raise ValueError("nargs not allowed")
        super(CmndAction, self).__init__(option_strings, dest, **kwargs)

    def __call__(self, parser, namespace, values, option_string=None):
        print '%r %r %r' % (namespace, values, option_string)
        setattr(namespace, self.dest, values)
        add_device_options_set[option_string] = {}
        add_device_options_set[option_string]['isset'] = True
        add_device_options_set[option_string]['value'] = values

def add_default_exec(cmnd_opts):
    try:
        print "Enter into add_device"
        #pdb.set_trace();
        path = '/sys/kernel/scst_tgt/handlers/' +cmnd_opts.handler+ '/mgmt'
        cmd='echo "'+ 'add_device ' +cmnd_opts.n+ ' filename=' +cmnd_opts.f+  ' ">' + path  
        print "=====Doing add_device====="
        subprocess.check_output(cmd, shell=True )
        print "=====leaving add_device====="

    except subprocess.CalledProcessError:
        print "error Executing the add_device command"

def delete_default_exec(cmnd_opts):
    try:
        print "Enter into del_device"
        path = '/sys/kernel/scst_tgt/handlers/' +cmnd_opts.handler+ '/mgmt'
        cmd='echo "del_device '  +cmnd_opts.n+ ' ">' + path  
        print "=====Doing delete device====="
        subprocess.check_output(cmd, shell=True )
        print "=====leaving del_device====="
        #com = 'del_device '  +cmnd_opts.n+ ' ">'
        #cmd = 'echo "' + com +path
        #pdb.set_trace();

    except subprocess.CalledProcessError:
        print "error Executing the del_device command"

def list_default_exec(cmnd_opts):
    try:
        print "Enter into list_device"
        print "=====Doing list_device===="
        output = subprocess.check_output("scstadmin -list_device", shell=True )
        print output
        print "=====leaving list_device====="
    except subprocess.CalledProcessError:
        print "error Executing the list_device command"

def set_default_exec(cmnd_opts):
    print "dummy nothing to do"


def set_thread_exec(cmnd_opts):
    try:
        print "Enter into set_device_attr"
        path = '/sys/kernel/scst_tgt/devices/' +cmnd_opts.n

        if cmnd_opts.t is not None:
            cmd = 'echo' + cmnd_opts.t + ' >' +path+ '/threads_num'
            subprocess.check_output(cmd, shell=True )
        #pdb.set_trace();
        print "=====Doing delete device====="
        subprocess.check_output(cmd, shell=True )
        print "=====leaving del_device====="
    except subprocess.CalledProcessError:
        print "error Executing the del_device command"

def set_usn_exec(cmnd_opts,usn):
    try:
        print "Enter into set_device_attr"
        path = '/sys/kernel/scst_tgt/devices/' +cmnd_opts.n
        cmd = 'echo ' + usn + ' >' +path+ '/usn'
        subprocess.check_output(cmd, shell=True )

       # if cmnd_opts.u is not None:
       #     cmd = 'echo ' + usn + ' >' +path+ '/usn'
       #     subprocess.check_output(cmd, shell=True )

        print "=====leaving set_usn_device====="

    except subprocess.CalledProcessError:
        print "error Executing the del_device command"

def set_threshold_exec(cmnd_opts):
    try:
        cmd = "echo " + threshold + "> /sys/kernel/scsi_tgt/devices/"+ cmnd_opts.device_name + "/threshold"
        output = subprocess.check_output(cmd, shell=True)
        print output, cmnd_opts
    except subprocess.CalledProcessError:
        print "error Executing the command"

def set_thin_provisioned_exec(cmnd_opts, thinprov):
    try:
        cmd='echo '+ thinprov + ' >/sys/kernel/scst_tgt/devices/' +cmnd_opts.n+ '/thin_provisioned'
        subprocess.check_output(cmd, shell=True )
        #cmd = "echo " + thinprov + " >/sys/kernel/scst_tgt/devices/"+ cmnd_opts.n + "/thin_provisioned"
    except subprocess.CalledProcessError:
        print "error Executing the command"

def set_rotational_exec(cmnd_opts, rotational):
    try:
        cmd = "echo " + rotational + " >/sys/kernel/scst_tgt/devices/"+ cmnd_opts.n + "/rotational"
        output = subprocess.check_output(cmd, shell=True)
    except subprocess.CalledProcessError:
        print "error Executing the command"

def set_readOnly_exec(cmnd_opts, rd):
    try:
        cmd = "echo " + rd + " >/sys/kernel/scst_tgt/devices/"+ cmnd_opts.n + "/read_only"
        output = subprocess.check_output(cmd, shell=True)
    except subprocess.CalledProcessError:
        print "error Executing the command"

def set_write_through_exec(cmnd_opts, wr):
    try:
        cmd = "echo " + wr + " >/sys/kernel/scst_tgt/devices/"+ cmnd_opts.n + "/write_through"
        output = subprocess.check_output(cmd, shell=True)
    except subprocess.CalledProcessError:
        print "error Executing the command"

def set_nv_cache_exec(cmnd_opts, nv):
    try:
        cmd = "echo " + nv + " >/sys/kernel/scst_tgt/devices/"+ cmnd_opts.n + "/nv_cache"
        output = subprocess.check_output(cmd, shell=True)
    except subprocess.CalledProcessError:
        print "error Executing the command"

def set_t10_dev_id_exec(cmnd_opts, dev_id):
    try:
        cmd = "echo " + dev_id + " >/sys/kernel/scst_tgt/devices/"+ cmnd_opts.n + "/t10_dev_id"
        output = subprocess.check_output(cmd, shell=True)
    except subprocess.CalledProcessError:
        print "error Executing the command"


def set_detach_exec(cmnd_opts, threshold):
    try:
	cmd = "echo " + threshold + "> /sys/kernel/scsi_tgt/devices/"+ cmnd_opts.device_name + "/detach"
        output = subprocess.check_output([cmd,"-l"], shell=True)
        print output, cmnd_opts
    except subprocess.CalledProcessError:
        print "error Executing the command"


def set_name(cmnd_opts, value):
    print "please set name"
    add_device_options_set['--dirname']
#set of commands to run for the options set

add_device_exec = {"default"                : add_default_exec,
                   "-p"                     : set_threshold_exec,
                   "--detach"               : set_detach_exec,
                   "-P"                     : set_thin_provisioned_exec,
                   "--thin_provisioned"     : set_thin_provisioned_exec,
                   "-u"                     : set_usn_exec,
                   "--usn"                  : set_usn_exec,
                   "-r"                     : set_rotational_exec,
                   "--rotational"           : set_rotational_exec,
                   "-y"                     : set_readOnly_exec,
                   "--read_only"            : set_readOnly_exec,
                   "-w"                     : set_write_through_exec,
                   "--write_through"        : set_write_through_exec,
                   "-v"                     : set_nv_cache_exec,
                   "--nv_cache"             : set_nv_cache_exec,
                   "-i"                     : set_t10_dev_id_exec,
                   "--t10_dev_id"           : set_t10_dev_id_exec,

                   }

delete_device_exec = {"default"  : delete_default_exec,
                   "-p"      : set_threshold_exec,
                   "--detach" : set_detach_exec,
                   "-P"      : set_thin_provisioned_exec,
                   }

list_device_exec = {"default"  : list_default_exec
                    }

set_device_exec = {"default"    : set_default_exec,
                    "--usn"     : set_usn_exec,
                    "-u"        : set_usn_exec,
                    "--usn"        : set_usn_exec,
                    "--threads" : set_thread_exec,
                    "-t"        : set_thread_exec,
                    }


def exec_commands(cmnd_opts):
    #execute commands
   # import pdb;pdb.set_trace();	
    print "Executing Arguments"
    if sys.argv[1] == "add_device":
        add_device_exec["default"](cmnd_opts);
        pdb.set_trace();
        for i in add_device_options_set.iterkeys():
            if add_device_options_set[i]['isset'] == True:
                add_device_exec[i](cmnd_opts, add_device_options_set[i]['value'])
    if sys.argv[1] == "del_device":
        delete_device_exec["default"](cmnd_opts);
    if sys.argv[1] == "list_device":
        list_device_exec["default"](cmnd_opts);
    if sys.argv[1] == "set_dev_attr":
        #pdb.set_trace();
        for i in add_device_options_set.iterkeys():
            if add_device_options_set[i]['isset'] == True:
                set_device_exec[i](cmnd_opts, add_device_options_set[i]['value'])


def parse_Arguments(parser):
    #parse arguments
    print "Parsing Arguments"
    arg1 = parser.parse_args()

def setup_SubCommands():
    #need to setup subCommands
    #parser = argparse.ArgumentParser(add_help=False, conflict_handler='resolve')
    parser = argparse.ArgumentParser()

    subparsers = parser.add_subparsers(help='commands')

    # A add device command
    addDevice_parser = subparsers.add_parser('add_device', help='Add a new device')
    #pdb.set_trace();	
    addDevice_parser.add_argument('-n', action='store', help='Device name', required=True)
    addDevice_parser.add_argument('-handler', action='store', help='handler', required=True)
    addDevice_parser.add_argument('-f', action='store', help='File name', required=True)
    addDevice_parser.add_argument('-u', "--usn", action=CmndAction, help='usn ', required=False)
    addDevice_parser.add_argument('-p', "--threshold_percentage", action=CmndAction, help='threshold_percentage', required=False)
    addDevice_parser.add_argument('-P', "--thin_provisioned", action=CmndAction, help='thin_provisioned', required=False)
    addDevice_parser.add_argument('-r', "--rotational", action=CmndAction, help='thin_provisioned', required=False)
    addDevice_parser.add_argument('-e',  "--removable", action=CmndAction, help='thin_provisioned', required=False)
    addDevice_parser.add_argument('-y', "--read_only", action=CmndAction, help='read only', required=False)
    addDevice_parser.add_argument('-w', "--write_through", action=CmndAction, help='write_through', required=False)
    addDevice_parser.add_argument('-v', "--nv_cache", action=CmndAction, help='nv_cache', required=False)
    addDevice_parser.add_argument('-i', "--t10_dev_id", action=CmndAction, help='nv_cache', required=False)

    # A delete device command
    deleteDevice_parser = subparsers.add_parser('del_device', help='Delete a device belonging to handler')
    deleteDevice_parser.add_argument('-n', action='store', help='Device name', required=True)
    deleteDevice_parser.add_argument('-handler', action='store', help='handler', required=True)

    # A list device command
    listDevice_parser = subparsers.add_parser('list_device', help='Delete a device belonging to handler')

    # A set device attribute command
    setDevice_parser = subparsers.add_parser('set_dev_attr', help='Set device attribute')
    setDevice_parser.add_argument('-n', dest="dev_name", action='store', help='Device name', required=True)
    setDevice_parser.add_argument('-u', "--usn", action=CmndAction, help='usn', required=False)
    setDevice_parser.add_argument('-t', action=CmndAction, help='thread_num', required=False)
    setDevice_parser.add_argument('-l', action=CmndAction, help='threads_pool_type', required=False)
    setDevice_parser.add_argument('-i', action=CmndAction, help='t10_dev_id', required=False)
    setDevice_parser.add_argument('-P', action=CmndAction, help='thin_provisioned', required=False)


    # A create command
    create_parser = subparsers.add_parser('create', help='Create a directory')
    create_parser.add_argument('--dirname', action=CmndAction, help='New directory to create', required=True)
    create_parser.add_argument('-d','--detach', action=CmndAction, help='New directory to create', required=True)
    create_parser.add_argument('--P', action=CmndAction, help='New directory to create', required=True)

    create_parser.add_argument('--read-only', action='store_true',
                               help='Set permissions to prevent writing to the directory',
                               )

    # A delete command
    delete_parser = subparsers.add_parser('delete', help='Remove a directory')
    delete_parser.add_argument('dirname', action='store', help='The directory to remove')
    delete_parser.add_argument('--recursive', '-r', default=False, action='store_true',
                               help='Remove the contents of the directory, too',
                               )

    return parser
    print "Setting up SubCommands"

def main():
    print "Starting main"
   	
    parser = setup_SubCommands()
    parse_Arguments(parser)
    #import pdb;pdb.set_trace();	
    
    exec_commands(parser.parse_args())

if __name__ == "__main__":
    main()
